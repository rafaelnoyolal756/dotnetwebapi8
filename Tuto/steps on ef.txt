1. Define Models
Create your Hero and Power classes in the Models folder.

Hero Model
csharp
Copy
Edit
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

public class Hero
{
    public int Id { get; set; }

    [Required, MaxLength(50)]
    public string Name { get; set; } = string.Empty;

    public string? Alias { get; set; }

    public ICollection<Power> Powers { get; set; } = new List<Power>();
}
Power Model
csharp
Copy
Edit
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

public class Power
{
    public int Id { get; set; }

    [ForeignKey("Hero")]
    public int HeroId { get; set; }
    public Hero Hero { get; set; }

    [Required, MaxLength(50)]
    public string Name { get; set; } = string.Empty;

    public string? Description { get; set; }
}
2. Configure Relationships using Fluent API
In ApplicationDbContext.cs, override OnModelCreating to enforce constraints.

csharp
Copy
Edit
using Microsoft.EntityFrameworkCore;

public class ApplicationDbContext : DbContext
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { }

    public DbSet<Hero> Heroes { get; set; }
    public DbSet<Power> Powers { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Hero>()
            .HasMany(h => h.Powers)
            .WithOne(p => p.Hero)
            .HasForeignKey(p => p.HeroId)
            .OnDelete(DeleteBehavior.Cascade);

        // Ensure that a hero cannot have duplicate powers (by Name)
        modelBuilder.Entity<Power>()
            .HasIndex(p => new { p.HeroId, p.Name })
            .IsUnique();
    }
}
3. Apply Migrations & Update Database
Run the following commands in the terminal:

sh
Copy
Edit
dotnet ef migrations add InitialCreate
dotnet ef database update
4. Implement FluentValidation for CRUD Operations
Create a Validators folder and add validation classes.

Hero Validator
csharp
Copy
Edit
using FluentValidation;

public class HeroValidator : AbstractValidator<Hero>
{
    public HeroValidator()
    {
        RuleFor(h => h.Name)
            .NotEmpty()
            .MaximumLength(50);

        RuleForEach(h => h.Powers)
            .SetValidator(new PowerValidator());
    }
}
Power Validator
csharp
Copy
Edit
using FluentValidation;

public class PowerValidator : AbstractValidator<Power>
{
    public PowerValidator()
    {
        RuleFor(p => p.Name)
            .NotEmpty()
            .MaximumLength(50);
    }
}
5. Register FluentValidation in Program.cs
Modify Program.cs to include FluentValidation.

csharp
Copy
Edit
using FluentValidation;
using FluentValidation.AspNetCore;
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);

// Add EF Core with SQL Server
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

// Register FluentValidation
builder.Services.AddControllers()
    .AddFluentValidation(fv => fv.RegisterValidatorsFromAssemblyContaining<HeroValidator>());

builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseAuthorization();
app.MapControllers();
app.Run();
6. Implement CRUD API Controllers
Create a HeroesController and PowersController for handling CRUD operations.

HeroesController
csharp
Copy
Edit
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

[Route("api/[controller]")]
[ApiController]
public class HeroesController : ControllerBase
{
    private readonly ApplicationDbContext _context;

    public HeroesController(ApplicationDbContext context)
    {
        _context = context;
    }

    [HttpGet]
    public async Task<ActionResult<IEnumerable<Hero>>> GetHeroes()
    {
        return await _context.Heroes.Include(h => h.Powers).ToListAsync();
    }

    [HttpGet("{id}")]
    public async Task<ActionResult<Hero>> GetHero(int id)
    {
        var hero = await _context.Heroes.Include(h => h.Powers)
            .FirstOrDefaultAsync(h => h.Id == id);

        if (hero == null)
            return NotFound();

        return hero;
    }

    [HttpPost]
    public async Task<ActionResult<Hero>> CreateHero(Hero hero)
    {
        _context.Heroes.Add(hero);
        await _context.SaveChangesAsync();
        return CreatedAtAction(nameof(GetHero), new { id = hero.Id }, hero);
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> UpdateHero(int id, Hero hero)
    {
        if (id != hero.Id)
            return BadRequest();

        _context.Entry(hero).State = EntityState.Modified;

        try
        {
            await _context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!_context.Heroes.Any(e => e.Id == id))
                return NotFound();

            throw;
        }

        return NoContent();
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteHero(int id)
    {
        var hero = await _context.Heroes.FindAsync(id);
        if (hero == null)
            return NotFound();

        _context.Heroes.Remove(hero);
        await _context.SaveChangesAsync();
        return NoContent();
    }
}
7. Test the API using Swagger or Postman
Run the application and navigate to https://localhost:5001/swagger to test CRUD operations.